airquality
mean(airquality$Temp[airquality$Month=5])
mean(airquality$Temp[airquality$Month="5"])
mean(airquality$Temp[airquality$Month(5)])
max(airquality$Ozone[airquality$Month=5])
max(airquality$Ozone,airquality$Month=5)
airquality$Temp[airquality=45]
max(airquality$Ozone[airquality$Month<-5])
max(airquality$Temp[airquality$Month<-5])
max(airquality$Temp[airquality$Month==5])
mean(airquality$Temp[airquality$Month==5)])
mean(airquality$Temp[airquality$Month==5])
d <- airquality$Temp
d
d <- airquality$temp[airquality$Month==5]
d
d <- airquality$temp[airquality$Month=5]
d
d <- airquality$temp[airquality$Month<-5]
d
p <- airquality$temp[airquality$Month<-5]
p
p <- airquality$Temp[airquality$Month<-5]
p
p <- airquality$Temp[airquality$Month==5]
p
p <- airquality$Temp[airquality$Month=5]
p
aa <- airquality$Temp[airquality$Month==5]
aa
max(airquality$Temp[airquality$Month<-5])
max(airquality$Temp[airquality$Month<=5])
max(airquality$Temp[airquality$Month=5])
aa <- airquality$Temp[airquality$Month<=5]
aa
aa <- airquality$Temp[airquality$Month="5"]
aa
airquality$Temp[airquality$Month="5"]
airquality$Temp[airquality$Month=5]
airquality$Temp[airquality=45]
airquality$Temp[airquality$Month<=5]
airquality$Temp[airquality=1:45]
airquality$Temp[airquality=(1:45)]
max(airquality$Temp[airquality=(1:45)])
max(airquality$Temp[airquality=(1:31)])
c1 <- airquality$Ozone>31
c2 <- airquality$Temp>90
mean(airquality$Solar.R[c1&c2])
c1 <- airquality$Ozone>31
c2 <- airquality$Temp>90
mean(airquality$Solar.R[c1&c2],na.rm = TRUE)
c1
c2
airquality$Ozone>31
c1 <- airquality$Solar.R>31
c2 <- airquality$Temp>90
mean(airquality$Solar.R[c1&c2])
c1 <- airquality$Ozone<31
c2 <- airquality$Temp>90
mean(airquality$Solar.R[c1&c2])
c1 <- airquality$Ozone<31
c2 <- airquality$Temp==90
mean(airquality$Solar.R[c1&c2])
c2
airquality$Month==5
airquality$Month=5
airquality$Month<-5
airquality$Month5
airquality
airquality
x <- c(1,2,3)
y <- c("a","b","c")
z <- c("#","$","%")
o <-rbind(x,y,z)
p <- cbind(x,y,z)
r <- rbind(o,p)
r
airquality
airquality$Ozone = "Ozono"
airquality
airquality$"Ozone" = "Ozono"
airquality
mtcars
dput(mtcars,"coches.R")
airquality
names(airquality("Ozono","Solar.R","Viento","Temperatura","mes","dia"))
airquality
suma <- 0
for(i in 1:10){
suma <- suma + i
}
print(suma)
suma <- 0
while(count<10){
print(count)
count <- count + 1
}
suma <- 0
while(count<10){
print(count)
count <- count + 1
}
print(count)
suma <- 0
while(count<10){
print(count)
suma <- suma + count
}
print(suma)
suma <- 0
while(count<10){
print(count)
suma <- suma + count
}
print(count)
suma <- 0
while(count<10){
#print(count)
suma <- suma + count
}
print(count)
suma <- 0
for(i in 1:10){
suma <- suma + i
}
print(suma)
suma <- 0
while(1<count<10){
#print(count)
suma <- suma + count
}
print(count)
suma <- 0
while(count=<10){
#print(count)
suma <- suma + count
}
print(count)
suma <- 0
i <- 0
while(i<10){
#print(count)
suma <- suma + i
}
suma <- 0
while(count<10){
#print(count)
suma <- suma + count
}
print(suma)
suma <- 0
count <- 0
while(count<10){
#print(count)
suma <- suma + count
}
suma <- 0
count <- 0
while(count<10){
print(count)
suma <- suma + count
}
suma <- 0
while(count<10){
print(count)
suma <- suma + count
}
airquality(names("ozono","solar.R"))
x <- c(1,2,3)
y <- c("a","b","c")
z <- c("#","$","%")
o <-rbind(x,y,z)
p <- cbind(x,y,z)
r <- rbind(o,p)
r
Ozono <- (airquality$Ozone)
airquality
Ozono <- c(airquality$Ozone)
airquality
Ozono <- (airquality=Ozone)
airquality
Ozono <- (airquality,Ozone)
airquality
ozono <- airquality$Solar.R
airquality
ozoo <- airquality$Solar.R
airquality
ozoo <- airquality$"Solar.R"
airquality
ozoo <- (airquality$"Solar.R")
airquality
suma <- 0
i <- 1
while (i<=10){
suma <- suma +1
i <- i + 1
}
print(suma)
suma <- 0
for(i in 1:10){
suma <- suma + i
}
print(suma)
suma <- 0
i <- 1
while (i<=10){
suma <- suma +1
# i <- i + 1
}
suma <- 0
i <- 1
while (i<=10){
suma <- suma + i
# i <- i + 1
}
suma <- 0
i <- 1
while (i<=10){
suma <- suma + i
i <- i + 1
}
print(suma)
airqualit <- airquality
airqualit
names(airqualit("fsdv","dsfc","dasfca","cxgrv","fwdcs","vds"))
names(airqualit("fsdv","dsfc","dasfca","cxgrv","fwdcs","vds"))
airqualit
names(airqualit("Ozone" = "vds"))
airqualit
names(airqualit(Ozone = "vds"))
airqualit
names(airqualit$Ozone = "vds"))
names(airqualit$Ozone = vds))
names(airqualit$Ozone = vds))
airqualit
names(airqualit$Ozone(ds))
library(datasets)
data("iris")
iris
ci<- iris$Sepal.Length
c1
c1 <- iris$Sepal.Length
c1
c1 <- mean(iris$Sepal.Length)
c1
c1 <- mean(iris$Sepal.Length)
c1
c2 <- mean(iris$Sepal.Width)
c2
c3 <- c(c1,c2)
c3
mejor("TX", "ataque")
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
Mejor <- function(estado, resultado){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(data$state)
if(!estado %in$ estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
Gus <- subset(data, state == estado)
mejorhospital <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
E <- Gus[which.min(Gus[,mejorhospital]), ]
E1 <- E[order(E$Hospital.Name), ]
hospital <- E1[1,2]
hospital
}
mejor("TX", "ataque")
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
Mejor <- function(estado, resultado){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(data$state)
if(!estado %in$ estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
Gus <- subset(data, state == estado)
mejorhospital <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
E <- Gus[which.min(Gus[,mejorhospital]), ]
E1 <- E[order(E$Hospital.Name), ]
hospital <- E1[1,2]
hospital
}
Mejor("TX", "ataque")
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
Mejor <- function(estado, resultado){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(data$State)
if(!estado %in% estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
Gus <- subset(data, state == estado)
mejorhospital <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
E <- Gus[which.min(Gus[,mejorhospital]), ]
E1 <- E[order(E$Hospital.Name), ]
hospital <- E1[1,2]
hospital
}
Mejor("TX", "ataque")
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
Mejor <- function(estado, resultado){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(datos$State)
if(!estado %in% estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
Gus <- subset(data, state == estado)
mejorhospital <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
E <- Gus[which.min(Gus[,mejorhospital]), ]
E1 <- E[order(E$Hospital.Name), ]
hospital <- E1[1,2]
hospital
}
Mejor("TX", "ataque")
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
Mejor <- function(estado, resultado){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(datos$State)
if(!estado %in% estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
Gus <- subset(datos, state == estado)
mejorhospital <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
E <- Gus[which.min(Gus[,mejorhospital]), ]
E1 <- E[order(E$Hospital.Name), ]
hospital <- E1[1,2]
hospital
}
Mejor("TX", "ataque")
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
Mejor <- function(estado, resultado){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(datos$State)
if(!estado %in% estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
Gus <- subset(datos, State == estado)
mejorhospital <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
E <- Gus[which.min(Gus[,mejorhospital]), ]
E1 <- E[order(E$Hospital.Name), ]
hospital <- E1[1,2]
hospital
}
Mejor("TX", "ataque")
setwd("~/Github/Programacion-Actaurial-III/Caso 2")
rankhospital <- function(estado, resultado, num = "Mejor"){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(datos$State)
if(!estado %in% estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
tavo <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
datos[, tavo] <- suppressWarnings(as.numeric(levels(datos[,tavo])[datos[,tavo]]))
datos[, 2] <- as.character(datos[, 2])
datosEstado <- datos[grep(estado, datos$State), ]
Ordenar_Datos <- datosEstado[order(datosEstado[, tavo], datosEstado[, 2], na.last = NA),]
if(num == "Mejor"){
Ordenar_Datos[1,2]
} else if(num == "peor"){
Ordenar_Datos[nrow(Ordenar_Datos), 2]
} else {
Ordenar_Datos[num, 2]
}
}
rankhospital("TX", "fallis", 4)
rankhospital("MD", "ataque", "peor")
rankhospital("MD", "ataque", "Mejor")
rankhospital("MN", "ataque", 5000)
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
rankingcompleto <- function(resultado, num = "Mejor"){
datos <- read.csv("outcome-of-care-measures.csv")
estado1 <- unique(datos$State)
if(!estado %in% estado1){
stop("Invalid state:(")
}
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
tavo <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
datos[, tavo] <- suppressWarnings(as.numeric(levels(datos[,tavo])[datos[,tavo]]))
datos[, 2] <- as.character(datos[, 2])
resultadofinal <- vector()
estado1 <- levels(datos[, 7])
for(i in 1:length(estado1)) {
datosEstado <- datos[grep(estados[i], datos$State), ]
Ordenar_Datos <- datosEstado[order(datosEstado[, tavo], datosEstado[, 2], na.last = NA), ]
hospital <- if(num == "Mejor"){
Ordenar_Datos[1,2]
} else if(num == "peor"){
Ordenar_Datos[nrow(Ordenar_Datos), 2]
} else {
Ordenar_Datos[num, 2]
}
resultadofinal <- append(resultadofinal, c(hospital, estado1[i]))
}
resultadofinal <- as.data.frame(matrix(resultadofinal,length(estado1), 2, byrow = TRUE))
colnames(resultadofinal) <- c("hospital", "estado")
rownames(resultadofinal) <- estado1
resultadofinal
}
head(rankingcompleto("ataque",20),10)
setwd("~/Github/Programacion-Actuarial-III/Caso 2")
rankingcompleto <- function(resultado, num = "Mejor"){
datos <- read.csv("outcome-of-care-measures.csv")
resultado1 <- c("ataque", "falla", "neumonia")
if(!resultado %in% resultado1){
stop("invalid outcome :C")
}
tavo <- if (resultado == "ataque"){
11
}  else if (resultado == "falla"){
17
}  else if (resultado == "neumonia") {
23
}
datos[, tavo] <- suppressWarnings(as.numeric(levels(datos[,tavo])[datos[,tavo]]))
datos[, 2] <- as.character(datos[, 2])
resultadofinal <- vector()
estado1 <- levels(datos[, 7])
for(i in 1:length(estado1)) {
datosEstado <- datos[grep(estado1[i], datos$State), ]
Ordenar_Datos <- datosEstado[order(datosEstado[, tavo], datosEstado[, 2], na.last = NA), ]
hospital <- if(num == "Mejor"){
Ordenar_Datos[1,2]
} else if(num == "peor"){
Ordenar_Datos[nrow(Ordenar_Datos), 2]
} else {
Ordenar_Datos[num, 2]
}
resultadofinal <- append(resultadofinal, c(hospital, estado1[i]))
}
resultadofinal <- as.data.frame(matrix(resultadofinal,length(estado1), 2, byrow = TRUE))
colnames(resultadofinal) <- c("hospital", "estado")
rownames(resultadofinal) <- estado1
resultadofinal
}
head(rankingcompleto("ataque",20),10)
